name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

env:
  POSTMAN_BASEURL: "http://localhost:5120"
  ASPNETCORE_ENVIRONMENT: "Production"

jobs:
  api_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      # .NET Setup
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      # Node.js Setup (minimal config for Newman)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: false
      
      # Newman Installation
      - name: Install Newman
        run: npm install -g newman@7 --no-package-lock
      
      # Build Server
      - name: Restore dependencies
        run: dotnet restore formbridge/formbridge.sln
      
      - name: Build solution
        run: dotnet build formbridge/formbridge.sln --no-restore --configuration Release
      
      # Server Startup with Health Check
      - name: Start Server
        run: |
          cd formbridge/server
          nohup dotnet run --configuration Release --urls "http://0.0.0.0:5120" > server.log 2>&1 &
          
          echo "Waiting for server startup..."
          timeout 120 bash -c '
            while ! curl -s http://localhost:5120/healthcheck >/dev/null; do
              sleep 3
              echo "Retrying health check..."
            done'
          echo "Server ready!"
          cat server.log
      
      # Postman API Tests
      - name: Run API Tests
        run: |
          echo "=== Test Environment ==="
          echo "Base URL: $POSTMAN_BASEURL"
          
          # Generate environment file if not exists
          if [ ! -f "./api-tests/postman_environment.json" ]; then
            echo '{
              "id": "'$(uuidgen)'",
              "name": "CI Environment",
              "values": [{
                "key": "baseurl",
                "value": "'$POSTMAN_BASEURL'",
                "enabled": true
              }]
            }' > ./api-tests/postman_environment.json
          fi
          
          newman run ./api-tests/Test.postman_collection.json \
            --environment ./api-tests/postman_environment.json \
            --global-var "baseurl=$POSTMAN_BASEURL" \
            --reporters cli,json \
            --reporter-json-export ./api-tests/results.json \
            --disable-unicode \
            --color off
          
          echo "=== Test Results ==="
          jq '.run.stats' ./api-tests/results.json
          
          if jq -e '.run.failures | length > 0' ./api-tests/results.json; then
            echo "::error::API Tests Failed"
            jq '.run.failures[] | {name: .source.name, error: .error.message}' ./api-tests/results.json
            exit 1
          fi

  gui_tests:
    runs-on: ubuntu-latest
    needs: api_tests
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Build Test Project
        run: |
          dotnet restore End2EndTester/End2EndTester.csproj
          dotnet build End2EndTester/End2EndTester.csproj --configuration Release --no-restore
      
      - name: Install Playwright
        run: |
          cd End2EndTester
          pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps
          playwright install-deps
      
      - name: Start Test Server
        run: |
          cd formbridge/server
          nohup dotnet run --configuration Release --urls "http://0.0.0.0:5120" &
          sleep 15
          curl -v http://localhost:5120/healthcheck
      
      - name: Run GUI Tests
        run: |
          cd End2EndTester
          dotnet test --configuration Release --no-build --logger "console;verbosity=normal" \
            --blame-hang-timeout 5m \
            --blame-hang-dump-type mini

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [api_tests, gui_tests]
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd /srv/www/malmo/Mohsen/formbridge/
            git fetch origin
            git reset --hard origin/main
            dotnet publish formbridge/formbridge.sln -c Release -o ./publish
            sudo systemctl restart formbridge.service
            echo "Deployment completed successfully"
